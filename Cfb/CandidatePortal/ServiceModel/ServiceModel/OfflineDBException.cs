using System;
using System.Data.SqlClient;
using System.Runtime.Serialization;

namespace Cfb.CandidatePortal.ServiceModel
{
	/// <summary>
	/// The exception that is thrown when the back-end database is offline or inaccessible. This class cannot be inherited.
	/// </summary>
	[DataContract(Namespace = "http://caccess.nyccfb.info/schema/data")]
	public sealed class OfflineDataException
	{
		/// <summary>
		/// The severity level of the error returned from SQL Server data provider.
		/// </summary>
		[DataMember(Name = "Class")]
		private readonly byte _class;

		/// <summary>
		/// Gets the severity level of the error returned from SQL Server data provider.
		/// </summary>
		public byte Class
		{
			get { return _class; }
		}

		/// <summary>
		/// A collection of one or more <see cref="SqlError"/> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server
		/// </summary>
		[DataMember(Name = "Errors")]
		private readonly SqlError[] _errors;

		/// <summary>
		/// Gets a collection of one or more <see cref="SqlError"/> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server
		/// </summary>
		public SqlError[] Errors
		{
			get { return _errors; }
		}

		/// <summary>
		/// The line number within the Transact-SQL command batch or stored procedure that generated the error. 
		/// </summary>
		[DataMember(Name = "LineNumber")]
		private readonly int _lineNumber;

		/// <summary>
		/// Gets the line number within the Transact-SQL command batch or stored procedure that generated the error. 
		/// </summary>
		public int LineNumber
		{
			get { return _lineNumber; }
		}

		/// <summary>
		/// A message that describes the current exception.
		/// </summary>
		[DataMember(Name = "Message")]
		private readonly string _message;

		/// <summary>
		/// Gets a message that describes the current exception.
		/// </summary>
		public string Message
		{
			get { return _message; }
		}

		/// <summary>
		/// A number that identifies the type of error.
		/// </summary>
		[DataMember(Name = "Number")]
		private readonly int _number;

		/// <summary>
		/// Gets a number that identifies the type of error.
		/// </summary>
		public int Number
		{
			get { return _number; }
		}

		/// <summary>
		/// The name of the stored procedure or remote procedure call (RPC) that generated the error.
		/// </summary>
		[DataMember(Name = "Procedure")]
		private readonly string _procedure;

		/// <summary>
		/// Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.
		/// </summary>
		public string Procedure
		{
			get { return _procedure; }
		}

		/// <summary>
		/// The name of the SQL Server host that generated the error.
		/// </summary>
		[DataMember(Name = "Server")]
		private readonly string _server;

		/// <summary>
		/// Gets the name of the SQL Server host that generated the error.
		/// </summary>
		public string Server
		{
			get { return _server; }
		}

		/// <summary>
		/// The name of the provider that generated the error.
		/// </summary>
		[DataMember(Name = "Source")]
		private string _source;

		/// <summary>
		/// Gets the name of the provider that generated the error.
		/// </summary>
		public string Source
		{
			get { return _source; }
		}

		/// <summary>
		/// A string representation of the frames on the call stack at the time the current exception was thrown.
		/// </summary>
		[DataMember(Name = "StackTrace")]
		private readonly string _stackTrace;

		/// <summary>
		/// Gets a string representation of the frames on the call stack at the time the current exception was thrown.
		/// </summary>
		public string StackTrace
		{
			get { return _stackTrace; }
		}

		/// <summary>
		/// A numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see SQL Server Books Online.
		/// </summary>
		[DataMember(Name = "State")]
		private readonly int _state;

		/// <summary>
		/// Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see SQL Server Books Online.
		/// </summary>
		public int State
		{
			get { return _state; }
		}

		/// <summary>
		/// Creates a new instance of the <see cref="OfflineDataException"/> class.
		/// </summary>
		private OfflineDataException() { }

		/// <summary>
		/// Creates a new instance of the <see cref="OfflineDataException"/> class _sqlExceptiond on an existing <see cref="SqlException"/>.
		/// </summary>
		/// <param name="source">The source SQL exception.</param>
		/// <exception cref="ArgumentNullException"><paramref name="source"/> is null.</exception>
		public OfflineDataException(SqlException source)
		{
			if (source == null)
				throw new ArgumentNullException("source", "Source SQL exception must not be null.");
			_class = source.Class;
			_errors = new SqlError[source.Errors.Count];
			source.Errors.CopyTo(_errors, 0);
			_lineNumber = source.LineNumber;
			_message = source.Message;
			_number = source.Number;
			_procedure = source.Procedure;
			_server = source.Server;
			_source = source.Source;
			_stackTrace = source.StackTrace;
			_state = source.State;
		}
	}
}
